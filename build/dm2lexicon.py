## create a lexicon json file for jsRealB from the full info in dme
## ignoring table information which is generated by other programs

import re,json,sys
from ppJson import ppJson

infile='../data/dme-lex.txt'
genresAnglaisFile='../data/englishGenderWords.txt'
outfile='lexicon-dme.json'
pat=re.compile(r'^\("([-\w]*?)"\s*(\w+)\s*(\w+).*\)$') # regex for lines of the form ("abacus" n2 NomC yes)

## conversion of POS
conv={"Verb":"V",
      "NomC":"N",
      "NomP":"N",
      "AdjQ":"A",
      "Pron":"Pro",
      "Dete":"D",
      "Ordi":"x",
      "Quan":"x",
      "Prep":"P",
      "Punc":"x",
      "Adve":"Adv",
      "ConC":"C",
      "ConS":"C",
      "Inte":"N",
      "Affi":"x",
      "Post":"x",
      "PreH":"x",
      "Disc":"x",
      "Ltre":"x"
}

# start of processing
i=0

## init dictionary
words={
    # special punctuation (copied from lexicon-en.json)
    " ": { "Pc": { "tab": ["pc1"] } },
    ".": { "Pc": { "tab": ["pc4"] } },
    "...": { "Pc": { "tab": ["pc4"] } },
    ",": { "Pc": { "tab": ["pc4"] } },
    ";": { "Pc": { "tab": ["pc4"] } },
    ":": { "Pc": { "tab": ["pc4"] } },
    "!": { "Pc": { "tab": ["pc4"] } },
    "?": { "Pc": { "tab": ["pc4"] } },
    "-": { "Pc": { "tab": ["pc1"] } },
    "\"": { "Pc": { "compl": "\"", "tab": ["pc5","pc6"] } },
    "*": { "Pc": { "compl": "*", "tab": ["pc5","pc6"] } },
    "(": { "Pc": { "compl": ")", "tab": ["pc5"] } },
    ")": { "Pc": { "compl": "(", "tab": ["pc6"] } },
    "[": { "Pc": { "compl": "]", "tab": ["pc5"] } },
    "]": { "Pc": { "compl": "[", "tab": ["pc6"] } },
    "{": { "Pc": { "compl": "}", "tab": ["pc5"] } },
    "}": { "Pc": { "compl": "{", "tab": ["pc6"] } },
    "the": {"D": {"tab": ["d4"]}}   # strangely "the" is not in dme 
    # add a few "modern" words
    ,"internet":{"N":{"tab":["n1"]}} 
    ,"hyperlink":{"N":{"tab":["n1"]}} 
    ,"website":{"N":{"tab":["n1"]}}
    ,"e-mail":{"N":{"tab":["n1"]}}
    ,"url":{"N":{"tab":["n1"]}}
    ,"google":{"N":{"tab":["n1"]},"V":{"tab":"v3"}}
    ,"cyber":{"A":{"tab":["a1"]}}
} 

for line in open(infile,encoding="utf-8"):
    line=line.rstrip()
    m=pat.match(line)
    if m:
        word=m.group(1)
        cat=m.group(3)
        if conv[cat]=="x":continue
        cat=conv[cat]
        tab=m.group(2)
        if tab=="ij":tab="n5" # consider interjections as nouns
        if word in words:
            w=words[word]
            if cat in w:
                if cat=="V":
                    if "tab" not in w["V"]: # keep only the first conjugation (e.g. "be")
                        w["V"]["tab"]=tab
                elif tab not in w[cat]["tab"]:
                    w[cat]["tab"].append(tab)
            else:
                if cat!="V":tab=[tab]
                w[cat]={"tab":tab}
        else:
            if cat!="V":tab=[tab]
            words[word]={cat:{"tab":tab}}
        i+=1
        # if i>1000: break

def addGender(mot,genre):
    if mot=="":return
    if mot in words:
        if "N" in words[mot]:
            words[mot]["N"]["g"]=genre;
        else:
            print("** "+mot+ "is not a Noun")
    else:
        print("** not in dme: "+mot)
            
# add gender for a number of english words
for line in open(genresAnglaisFile,encoding="utf-8"):
    if line[0]=="#":continue
    mots=line.rstrip().split("\t")
    addGender(mots[0].strip(),"m")
    if len(mots)==2:
        addGender(mots[1].strip(),"f")

outF=open(outfile,"w")
# outF.write("var lexiconEn =\n")
ppJson(outF,words)
print("%d words written on %s"%(len(words),outfile))